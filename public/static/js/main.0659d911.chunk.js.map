{"version":3,"sources":["logo.jpg","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_browser_umd","query","loading","error","data","console","log","launches","map","Component","Launch_Query","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0659d911.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.dc0e8bb5.jpg\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment'\nimport {Link} from 'react-router-dom'\n\nexport default function LaunchItem({launch: {flight_number, mission_name, launch_date_local, launch_success }}) {\n        // ask jeff about this props right here\n    // console.log(props.launch);\n  return (\n    <div className= \"card card-body mb-3\">\n    <div className= \"row\">\n        <div className= \"col-md-9\">\n        <h4>Mission: <span className={classNames({\n          'text-success': launch_success,\n          'text-danger': !launch_success\n        })}>{mission_name}</span></h4>\n        <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n        </div>\n        <div className= \"col-md-3\">\n        <Link to={`/launch/${flight_number}`} className= \"btn btn-secondary\">Launch Details</Link>\n        </div>\n    </div>\n\n    </div>\n  )\n}\n\n","import React from 'react'\n\nexport default function MissionKey() {\n  return (\n    <div className=\"my-3\">\n      <p>\n          <span className=\"px-3 mr-2 bg-success\"/> = Success\n      </p>\n      <p>\n          <span className=\"px-3 mr-2 bg-danger\"/> = Fail\n      </p>\n    </div>\n  )\n}\n","import React, { Component, Fragment } from 'react';\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\n\n// query data here \\\\ same set up as the schema\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n        flight_number\n        mission_name\n        launch_date_local\n        launch_success\n    }\n  }\n`;\n\n\n\nexport class Launches extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className= \"display-4 my-3\"> Launches</h1>\n        <MissionKey/>\n        <Query query={LAUNCHES_QUERY}>\n      {\n         /* ask about this too  */\n        ({ loading, error, data})=> {\n          \n          if(loading) return <h4>Loading...</h4>\n          if(error) console.log(\"this is your error\",error);\n          console.log(\"this is your data\",data);\n\n          return <Fragment>\n            {\n              /* Maps through data here */\n              data.launches.map(launch => (\n                <LaunchItem key ={launch.flight_number} launch={launch}/>\n              ))\n            }\n          </Fragment>;\n\n        }\n      }\n      </Query>\n      </Fragment>\n    )\n  }\n}\n\nexport default Launches\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\n// query to graphql\nconst Launch_Query = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launch extends Component {\n    render() {\n        let { flight_number } = this.props.match.params;\n        flight_number = parseInt(flight_number);\n        return (\n            <Fragment>\n                <Query query={Launch_Query} variables={{ flight_number }}>\n                    {\n                        ({ loading, error, data }) => {\n                            if (loading) return <h4>Loading...</h4>\n                            if (error) console.log(error)\n                            console.log(data)\n\n                            const { mission_name, flight_number, launch_year, launch_success, rocket: { rocket_id, rocket_name, rocket_type } } = data.launch\n                            return (\n                                <div>\n                                    <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission:</span>{mission_name}</h1>\n                                    <h4 className=\"mb-3\">Launch Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">\n                                            Flight Number: {flight_number}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch Year: {launch_year}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Launch Successful:{' '}\n                                            <span\n                                                className={classNames({\n                                                    'text-success': launch_success,\n                                                    'text-danger': !launch_success\n                                                })}\n                                            >\n                                                {launch_success ? 'Yes' : 'No'}\n                                            </span>\n                                        </li>\n                                    </ul>\n\n                                    <h4 className=\"my-3\">Rocket Details</h4>\n                                    <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                        <li className=\"list-group-item\">\n                                            Rocket Name: {rocket_name}\n                                        </li>\n                                        <li className=\"list-group-item\">\n                                            Rocket Type: {rocket_type}\n                                        </li>\n                                    </ul>\n                                    <hr/>\n                                    <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                                </div>\n                            )\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launch\n","import React, { Component } from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\nimport './App.css';\nimport logo from \"./logo.jpg\";\n\n// get request from backend to frontend \\\\ ? when your getting data from server\nconst client = new ApolloClient({\n  uri: \"http://localhost:5000/graphql\"\n})\n\nclass App extends Component {\n  render() {\n    var appStyle = {\n      width: 300,\n      display: 'block',\n      margin: \"auto\"\n    }\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"container\">\n            <img src={logo} alt=\"spaceX Logo\" style={appStyle} />\n            <Route exact path=\"/\" component={Launches}/>\n            <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}